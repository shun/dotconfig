#!/bin/bash

if [ "$(uname)" == 'Darwin' ]; then
    export OS='Mac'
elif [ "$(expr substr $(uname -s) 1 5)" == 'Linux' ]; then
    export OS='Linux'
elif [ "$(expr substr $(uname -s) 1 10)" == 'MINGW32_NT' ]; then
    export OS='Cygwin'
else
    echo "Your platform ($(uname -a)) is not supported."
    exit 1
fi

# prompt color
CLRGREEN="\[\e[0;32m\]"
CLRYELLOW="\[\e[0;36m\]"
CLRCYAN="\[\e[0;33m\]"
CLRWHITE="\[\e[00m\]"

alias env="env | sort"
alias vi=nvim
alias pt="pt --nogroup -iS"
alias ni="nvr --remote"

alias gc="git checkout"
alias gp="git push origin"
alias gl="git clone"

alias clang11="clang++ -std=c++11"
alias clang14="clang++ -std=c++14"
alias clang17="clang++ -std=c++17"
alias p2="python"
alias p3="python3"
if [ -f $HOME/workspace/gitrepo/gitprompt/git-completion.bash ]; then
    source $HOME/workspace/gitrepo/gitprompt/git-completion.bash
fi
if [ -f $HOME/workspace/gitrepo/gitprompt/git-prompt.sh ]; then
    source $HOME/workspace/gitrepo/gitprompt/git-prompt.sh
fi
#export GIT_PS1_SHOWDIRTYSTATE=true
#export GIT_PS1_SHOWUNTRACKEDFILES=true
#export GIT_PS1_SHOWSTASHSTATE=true
#export GIT_PS1_SHOWUPSTREAM=auto

export PATH=/usr/local/bin:$GOPATH/bin:$GOROOT/bin:$HOME/.cargo/bin:$PATH

if [ $OS = "Mac" ]; then
    export GOROOT=/usr/local/opt/go/libexec
    alias sed="/usr/local/bin/gsed"
    export PATH="/usr/local/opt/llvm/bin:$PATH"

elif [ $OS = "Linux" ];then
    export PATH=$HOME/.linuxbrew/bin:$PATH
    export GOROOT=$HOME/.linuxbrew/opt/go/libexec
    alias sed="/bin/sed"
    alias pbcopy="xsel -ib"
fi

if [ "x"$CONTAINERNAME == "x" ]; then
    export MACHINENAME=`hostname`
else
    export MACHINENAME=$CONTAINERNAME
fi

export PS1="${CLRGREEN}[${CLRYELLOW}\u${CLRGREEN}@${CLRCYAN}$MACHINENAME${CLRGREEN}: \w]\$(__git_ps1)\n${CLRWHITE}\$ "
export XDG_CONFIG_HOME=$HOME/.config
export XDG_CACHE_HOME=$HOME/.cache
export EDITOR=nvim

export GOPATH=$HOME/.go
export HISTIGNORE="ll:history*:cd"
export PROMPT_COMMAND='history -a; history -r'
export HISTCONTROL=erasedups

cd() {
    builtin cd -P "$@" && ls -Gla
}

pushd() {
    builtin pushd "$@" && ls -Gla
}

popd() {
    builtin popd "$@" && ls -Gla
}

mkcd() {
    mkdir -p "$@" && cd "$@"
}

findfile() {
    if [ $# -eq 1 ]; then
        find . -type f -name "$1"
    elif [ $# -eq 2 ]; then
        find "$1" -type f -name "$2"
    fi
}

finddir() {
    if [ $# -eq 1 ]; then
        find . -type d -name "$1"
    elif [ $# -eq 2 ]; then
        find "$1" -type d -name "$2"
    fi
}

# util command for docker
dbash() {
    local lbl=$1
    shift
    local opt=$@
    docker exec -it -e LINES=$(tput lines) -e COLUMNS=$(tput cols) $opt $lbl bash
}

dstart() {
    docker start $1
}

dstop() {
    docker stop $1
}

drestart() {
    docker restart $1
}

dclear() {
    docker stop $1; docker rm $1
}

# search history
peco-select-history() {
ruby $HOME/workspace/gitrepo/myscript/removedups.rb

#    local l=$(history | sort -r | peco --layout=bottom-up --query "$READLINE_LINE")
local l=$(history | sort -r | peco  --query "$READLINE_LINE")
local l=`echo ${l} | sed -e "s/^ *[0-9]\+ \+//g"`
READLINE_LINE=`echo ${l}`
READLINE_POINT=${#l}
}
bind -x '"\C-r": peco-select-history'

# search git branch
peco-select-branch() {
#    local l=$(git branch | sort -r | peco --layout=bottom-up --query "$READLINE_LINE")
local l=$(git branch | sort -r | peco --query "$READLINE_LINE")
local l=`echo ${l:2} | sed -e "s/^.. //g"`
READLINE_LINE=`echo "git checkout ${l}"`
READLINE_POINT=${#READLINE_LINE}
}
bind -x '"\C-t": peco-select-branch'

function share_history {
    history -a
    history -c
    history -r
}
PROMPT_COMMAND='share_history'

